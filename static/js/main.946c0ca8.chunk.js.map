{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","className","onChange","getTempUnits","value","Form","onSubmit","loadWeather","type","name","placeholder","Weather","city","country","weatherData","list","map","item","index","key","dateString","dt_txt","Intl","DateTimeFormat","hour","minute","format","Date","weekday","weather","imgSrc","concat","icon","src","alt","title","description","renderConditionIcon","main","temp","humidity","wind","speed","error","Open_Weather_Map_Key","units","c","f","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","setState","unit","target","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","api_call","response","wrap","_context","prev","next","elements","fetch","state","sent","json","stop","_x","apply","arguments","undefined","bind","assertThisInitialized","titles","components_form","components_weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8RAceA,EAZA,SAACC,GACd,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,UAAQE,SAAUL,EAAMM,cACtBL,EAAAC,EAAAC,cAAA,UAAQI,MAAM,KAAd,SACAN,EAAAC,EAAAC,cAAA,UAAQI,MAAM,KAAd,YCIOC,EAVF,SAACR,GACZ,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,iBAAiBK,SAAUT,EAAMU,aAC/CT,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,OAAOC,YAAY,SAC3CZ,EAAAC,EAAAC,cAAA,SAAOQ,KAAK,OAAOC,KAAK,UAAUC,YAAY,YAC9CZ,EAAAC,EAAAC,cAAA,+BCwDSW,EApCC,SAACd,GACf,OACEC,EAAAC,EAAAC,cAAA,WAIIH,EAAMe,MAAQf,EAAMgB,SAAWf,EAAAC,EAAAC,cAAA,UAAKH,EAAMe,KAAX,KAAmBf,EAAMgB,QAAzB,cAC/Bf,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,oBAGJF,EAAAC,EAAAC,cAAA,aACGH,EAAMiB,YAAYC,KAAKC,IAAI,SAACC,EAAMC,GAAP,OAC1BpB,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAakB,IAAKD,GAE9BpB,EAAAC,EAAAC,cAAA,WA1CUoB,EA0CYH,EAAKI,OAxCvCvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,aAAQ,IAAIsB,KAAKC,eAAe,QAAS,CAACC,KAAM,UAAWC,OAAQ,YAAYC,OAAO,IAAIC,KAAKP,KAC/FtB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,aAAQ,IAAIsB,KAAKC,eAAe,QAAS,CAACK,QAAS,UAAUF,OAAO,IAAIC,KAAKP,QAsCnEtB,EAAAC,EAAAC,cAAA,UA7BY,SAAC6B,GACzB,IAAMC,EAAM,mCAAAC,OAAsCF,EAAQG,KAA9C,QACZ,OACElC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKH,EAAQI,IAAI,eAAeC,MAAON,EAAQO,cA0BrCC,CAAoBpB,EAAKY,QAAQ,KACtC/B,EAAAC,EAAAC,cAAA,UAAKiB,EAAKqB,KAAKC,KAAKzC,EAAAC,EAAAC,cAAA,iBACpBF,EAAAC,EAAAC,cAAA,UAAKiB,EAAKqB,KAAKE,UACf1C,EAAAC,EAAAC,cAAA,UAAKiB,EAAKwB,KAAKC,QA9CN,IAACtB,MAoDnBvB,EAAM8C,OAAS7C,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAAiBJ,EAAM8C,SCpDpDC,SAAuB,oCAEvBC,EAAQ,CACZC,EAAI,SACJC,EAAI,YA4ESC,cAxEb,SAAAA,EAAYnD,GAAM,IAAAoD,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAChBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMvD,KAaRM,aAAe,SAACqD,GAEdA,EAAEC,iBAEFR,EAAKS,SAAS,CACZC,KAAMd,EAAMW,EAAEI,OAAOxD,OACrBuC,MAAO,MApBOM,EAyBlBY,WAzBkB,eAAAC,EAAAZ,OAAAa,EAAA,EAAAb,CAAAc,EAAAjE,EAAAkE,KAyBL,SAAAC,EAAMV,GAAN,IAAA5C,EAAAC,EAAAsD,EAAAC,EAAA,OAAAJ,EAAAjE,EAAAsE,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAEXhB,EAAEC,iBAEI7C,EAAO4C,EAAEI,OAAOa,SAAS7D,KAAKR,MAC9BS,EAAU2C,EAAEI,OAAOa,SAAS5D,QAAQT,MAL/BkE,EAAAE,KAAA,EAWYE,MAAK,qDAAA3C,OAAsDnB,EAAtD,KAAAmB,OAA8DlB,EAA9D,WAAAkB,OAA+EkB,EAAK0B,MAAMhB,KAA1F,WAAA5B,OAAwGa,IAXzH,cAWLuB,EAXKG,EAAAM,KAAAN,EAAAE,KAAA,EAaYL,EAASU,OAbrB,OAaLT,EAbKE,EAAAM,KAgBRhE,GAAQC,EACToC,EAAKS,SAAS,CACZ9C,KAAMwD,EAASxD,KAAKH,KACpBI,QAASuD,EAASxD,KAAKC,QACvBC,YAAasD,EACbzB,MAAO,KAITM,EAAKS,SAAS,CACZf,MAAO,uCA1BA,yBAAA2B,EAAAQ,SAAAZ,MAzBK,gBAAAa,GAAA,OAAAjB,EAAAkB,MAAA5B,KAAA6B,YAAA,GAGhBhC,EAAK0B,MAAQ,CACXhB,KAAM,SACN/C,UAAMsE,EACNrE,aAASqE,EACTpE,YAAc,GACd6B,WAAOuC,GAGTjC,EAAK9C,aAAe8C,EAAK9C,aAAagF,KAAlBjC,OAAAkC,EAAA,EAAAlC,CAAAD,IAXJA,wEAyDhB,OACEnD,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAACqF,EAAD,CAAQlF,aAAciD,KAAKjD,eAC3BL,EAAAC,EAAAC,cAACsF,EAAD,CAAM/E,YAAa6C,KAAKS,aACxB/D,EAAAC,EAAAC,cAACuF,EAAD,CACE3E,KAAMwC,KAAKuB,MAAM/D,KACjBC,QAASuC,KAAKuB,MAAM9D,QACpBC,YAAasC,KAAKuB,MAAM7D,YACxB6B,MAAOS,KAAKuB,MAAMhC,gBAnEV6C,IAAMC,WCDJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uECVNC,IAASC,OAAOlG,EAAAC,EAAAC,cAACiG,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.946c0ca8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = (props) => {\r\n  return(\r\n    <div className=\"title-container\">\r\n      <h1>Weather App</h1>\r\n      <select onChange={props.getTempUnits}>\r\n        <option value=\"c\">°C</option>\r\n        <option value=\"f\">°F</option>\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Titles;","import React from 'react';\r\n\r\nconst Form = (props) =>{\r\n  return(\r\n    <form className=\"form-container\" onSubmit={props.loadWeather}>\r\n      <input type=\"text\" name=\"city\" placeholder=\"City\"/>\r\n      <input type=\"text\" name=\"country\" placeholder=\"Country\"/>\r\n      <button>Get Weather</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n/**\r\n * Takes a date string and returns a <div> containing the Time and Day of the week\r\n * @param {String<TYPE>} dateString \r\n */\r\nconst renderTimeAndDay = (dateString) =>{\r\n  return(\r\n    <div>\r\n      <label>{new Intl.DateTimeFormat('en-US', {hour: 'numeric', minute: 'numeric'}).format(new Date(dateString))}</label>\r\n      <br />\r\n      <label>{new Intl.DateTimeFormat('en-US', {weekday: 'short'}).format(new Date(dateString))}</label>\r\n    </div>\r\n  );\r\n};\r\n\r\n/**\r\n * Takes an array and returns an <img> with weather icon with description for tooltip\r\n * @param {Array<TYPE>} weather \r\n */\r\nconst renderConditionIcon = (weather) => {\r\n    const imgSrc = `http://openweathermap.org/img/w/${weather.icon}.png`;\r\n    return(\r\n      <img src={imgSrc} alt=\"Weather icon\" title={weather.description} />\r\n    );\r\n};\r\n\r\nconst Weather = (props) =>{\r\n  return(\r\n    <div>\r\n      {/* Weather conditions to display */}\r\n      {/* Display table only when there is a city and country in the props */}\r\n      {\r\n        props.city && props.country && <h1>{props.city}, {props.country} Forecast</h1> &&\r\n        <table>\r\n          <thead>\r\n            <tr className=\"table-headers\">\r\n              <th>TIME</th>\r\n              <th>CONDITION</th>\r\n              <th>TEMP</th>\r\n              <th>HUMIDITY</th>\r\n              <th>WIND</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {props.weatherData.list.map((item, index) => (\r\n              <tr className=\"table-rows\" key={index}>\r\n                {/* Converting the DateTime string into a weekday */}\r\n                <td>{renderTimeAndDay(item.dt_txt)}</td>\r\n                <td>{renderConditionIcon(item.weather[0])}</td>\r\n                <td>{item.main.temp}<sup>o</sup></td>\r\n                <td>{item.main.humidity}</td>\r\n                <td>{item.wind.speed}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      }\r\n      {props.error && <p className=\"weather_error\">{props.error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Weather;","import React from 'react';\nimport Titles from './components/titles';\nimport Form from './components/form';\nimport Weather from './components/weather';\nimport { async } from 'q';\n\nconst Open_Weather_Map_Key = \"c0c1c6434e513470b3d0d37a0fb06524\";\n\nconst units = {\n  'c':'metric',\n  'f':'imperial'\n};\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n\n    this.state = {\n      unit: \"metric\",\n      city: undefined,\n      country: undefined,\n      weatherData : {},\n      error: undefined\n    };\n\n    this.getTempUnits = this.getTempUnits.bind(this);\n  };\n\n  getTempUnits = (e) =>{\n    // Prevents the full page refresh that occurs by default\n    e.preventDefault();\n\n    this.setState({\n      unit: units[e.target.value],\n      error: \"\"\n    });\n\n  };\n\n  getWeather = async(e) =>{\n    // Prevents the full page refresh that occurs by default\n    e.preventDefault();\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    // api call to get only a single point of weather data\n    // const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${Open_Weather_Map_Key}`);\n\n    // api call to get 5 day/ 3 hour forecast data\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&units=${this.state.unit}&appid=${Open_Weather_Map_Key}`);\n\n    const response = await api_call.json();    \n\n    // Don't set the state unless user enters both city and country\n    if(city && country){\n      this.setState({\n        city: response.city.name,\n        country: response.city.country,\n        weatherData: response,\n        error: \"\"\n      });\n    }\n    else{\n      this.setState({\n        error: \"Please enter both city and country\"\n      });\n    }\n  };\n\n  render(){\n    return(\n      <div>\n        {/* Add Components here */}\n        <Titles getTempUnits={this.getTempUnits}/>\n        <Form loadWeather={this.getWeather}/>\n        <Weather \n          city={this.state.city}\n          country={this.state.country}\n          weatherData={this.state.weatherData}\n          error={this.state.error}/>\n      </div>\n    );\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}